How JS works ?
- Everything in js happens inside the execution context
- Execution context is like a container and it has 2 component
1. Memory component:
    - All the variables and functions are stored in Memory component (key value pair & func)
    - it is also known as variable environment
2. Code component:
    - Code will be executed one at a time.
    - it is also known as thread of execution (a thread executes code one at a time)

- JS is synchronous single threaded language
- JS executes one command at a time in sequential order
- JS will move to next line once a line execution is completed
================================================================================================================
How JS code is executed?
- Every js code executes in execution context
- execution context is created in 2 phases
- Initial value for variable is undefined and function is entire function code
- execution will happen in call stack which order the executionof code
ex: 
var n = 2;
function square(num) {
    var ans = num * num;
    return ans;
}
var square2 = square(2);
var square4 = square(4)
1. Memory creation phase
    - n: undefined, 2
    - square : {...} entire code of function
    - square2: undefined, 4
    - square4: undefined, 16
2. Code execution phase
    - when a function starts execution again a new execution context will be created in Memory
    - num: undefined, 2, 4
    - ans: undefined, 4, 16

watch : https://www.youtube.com/watch?v=iLWTnMzWtj4&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&index=3
================================================================================================================
Hoisting in js?
    - Hoisting is the default behaviour in js in which variable and function will be hoisted 
      to the top of the execution
    --------------------------------------------
    var x = 7;
    function getName() {
        console.log('Namaste js');
    }
    getName(); // Namaste js
    console.log(x) // 7
    --------------------------------------------
    getName(); // Namaste js
    console.log(x) // undefined
    var x = 7;
    function getName() {
        console.log('Namaste js');
    }
    -------------------------------------------
    getName; // shows declaration of func
    console.log(x) // reference error x is not defined
    function getName() {
        console.log('Namaste js');
    }
    --------------------------------------------
    getName(); // getName is not a function ( behaves as a variable)
    console.log(x) // undefined
    var x = 7;
    const getName = () => {
        console.log('Namaste js');
    }
================================================================================================================
null vs undefined ?
    In JavaScript, undefined is a type, whereas null an object.
    null is an assigned value. It means nothing.
    undefined typically means a variable has been declared but not defined yet.
    null and undefined are falsy values.
    null and undefined are both primitives. However an error shows that typeof null = object.
    null !== undefined but null == undefined.
    ----------------------------------------------------------------------
    Practical Differences:
    All of this is great, but what about a practical difference between null and undefined?
    Consider the following code snippet:
    let logHi = (str = 'hi') => {
    console.log(str);
    }
    The code above creates a function named logHi. This function requires one parameter and 
    sets the default of that parameter to hi if it isn’t supplied. Here’s what that looks like:
    logHi();
    // hi
    We can also supply a parameter to overwrite this default:
    logHi('bye');
    // bye
    With default parameters, undefined will use the default while null does not.
    logHi(undefined);
    // hi
    logHi(null);
    // null
================================================================================================================
Scope in js ?
- Scope in js related to lexical environment
- lexical scope is the scope of local block along with lexical scope of parent block
================================================================================================================
let & const ?
- let and const are also hoisted but it will be in temporal dead zone (a seperate memory space which cannot be access)
- After initalizing let and const can be accessed
- reference error: accessing variable without declaration 
- syntax error: any error in syntax (declaring x with let and var)
- type error: type mismatch error (assigning value later to const)
================================================================================================================
block ?
- {} - is a block
- block is used combine multiple js statement to group
- let and const are block scope and var is function scope or global scope
more details: https://www.youtube.com/watch?v=lW_erSjyMeM&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&index=10
================================================================================================================
Debouncing and throttling ?
- used for optimizing and performance of web app
- debouncing executes the function only after some cooling period.
  When an event occurs, a timer is set.
  If the event is triggered again before the timer expires, the previous timer is cleared and a new timer is set.
  The function is executed only when the timer completes without being interrupted. 
- throttling executes the function at a regular interval
  When an event occurs, the function is called immediately.
  Subsequent calls are ignored until a certain amount of time has passed.
  After the time period, the function can be called again.

When to Use
  - Use Debouncing for events where you want to wait for a user to stop performing an action, like typing in a search bar or resizing a window.
  - Use Throttling for events that need to happen at regular intervals, like scrolling or resizing, where you want to ensure that the event handler doesn’t run too frequently.

ex: 
export default function App() {
  const debounce = (func, timeout = 300) => {
    let timer;
    return (...args) => {
      clearTimeout(timer);
      timer = setTimeout(() => {
        func(...args);
      }, timeout);
    };
  };
  const saveInput = (e) => {
    console.log("querying data", e.target.value);
  };
  const processChange = debounce((e) => saveInput(e));

  return (
    <div className="App">
      <input type="text" onKeyUp={processChange} />
    </div>
  );
}

export default function App() {
  const throttle = (func, timeout = 3000) => {
    let flag = true;
    return (...args) => {
      if (flag) {
        func(...args);
      }
      flag = false;
      setTimeout(() => {
        flag = true;
      }, timeout);
    };
  };
  const saveInput = (e) => {
    console.log("querying data", e.target.value);
  };
  const processChange = throttle((e) => saveInput(e));

  return (
    <div className="App">
      <input type="text" onKeyUp={processChange} />
    </div>
  );
}

================================================================================================================
closure ?
- Function along with it's lexical environment bundled together forms a closure
- Uses of closure
- currying
- in async and promise
ex: function x() {
    var a =7;
    function y() {
        console.log(a);
    }
    return y;
};
var z = x();
z() // 7
--------------------------------------------------------------------------------------------
function x() {
    var a =7;
    function y() {
        console.log(a);
    }
    a = 100;
    return y;
};
var z = x();
z() // 100

closure imp: https://www.youtube.com/watch?v=eBTBG4nda2A&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&index=13
================================================================================================================
First class function ?
- A abiliy of a function to call another function and use arguments and return a value is called first class function
- Function statement or declaration:
    function a() {
        console.log('hi');
    }
- Function expression:
    var b = function() {
        console.log('hi');
    }
- Anonymous function:
    function () {
        console.log('hi');
    }
- Named function:
    var b = function a() {
        console.log('hi');
    }
================================================================================================================
callback and event loop?
- callback function is a function which will be passed as arguments to another function and this callback
function will be called after calling another function (another function is called as higher order function)
- Pure function is function without any side effects
https://www.youtube.com/watch?v=8zKuNo4ay8E&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&index=17 - event loop
================================================================================================================
async vs defer ?
Normal:
<script src="some.js />
-html parsing -> script fetching and executing -> html parsing
order of execution is maintained
decrease performance if script takes time to download and executes

async:
<script async src="some.js />
-html parsing -> script executing -> html parsing
-script fetching
order of execution is not maintained
blocks dom when one script is dependent on another

defer:
<script defer src="some.js />
-html parsing -> script executing
-script fetching
order of execution is maintained
================================================================================================================
Currying in js?
- Currying is an advanced technique to transform a function of arguments n, to n functions of one or less arguments.
Example of a curried function:
function add (a) {
  return function(b){
    return a + b;
  }
}
add(3)(4)

-For Example, if we have a function f(a,b) , then the function after currying, will be transformed to f(a)(b).
-By using the currying technique, we do not change the functionality of a function, we just change the way it is invoked.
Let’s see currying in action:
function multiply(a,b){
  return a*b;
}
function currying(fn){
  return function(a){
    return function(b){
      return fn(a,b);
    }
  }
}

var curriedMultiply = currying(multiply);
multiply(4, 3); // Returns 12
curriedMultiply(4)(3); // Also returns 12
As one can see in the code above
we have transformed the function multiply(a,b) to a function curriedMultiply , which takes in one parameter at a time.
================================================================================================================
understanding this?

//hall
this.computer = 'dell';

this.smallRoom = {
	computer: 'macbook',
  print: function () {
  console.log(`my computer is ${this.computer}`)
  },
  printArrow:  () => {
  console.log(`my computer is ${this.computer}`)
  }
}
let smallRoom = {
	computer: 'macbook',
  print: function () {
  console.log(`my computer is ${this.computer}`)
  },
  printArrow: () => {
  console.log(`my computer is ${this.computer}`)
  }
}

function secondRoom() {
console.log(`my computer is ${this.computer}`)
}

const secondRoomArrow = () => {
console.log(`my computer is ${this.computer}`)
}

//let 
console.log(`my computer is ${this.computer}`) // "my computer is dell"
this.smallRoom.print() // "my computer is macbook"
this.smallRoom.printArrow() //"my computer is dell"
smallRoom.print()// "my computer is macbook"
smallRoom.printArrow()// "my computer is macbook"
secondRoom() // "my computer is dell"
secondRoom.call(this) // for use strict
secondRoomArrow() //  "my computer is dell"
================================================================================================================
Differences between _proto_ and prototype and prototype inheritance ?
__proto__ is the actual object which contains information about methods and property
 prototype is the object that is used to build __proto__
 ================================================================================================================
 local storage and session storage ?
 - cookies can store up to 4000bytes and it will sent on each request
 - local storage and session storage can store upto 5MB
 - session storage store data particular to current user session (user closes tab or browser)
 - local storage stores data untill user clear the cache memory

 ex: localStorage.setItem('user', JSON.stringfy(user));
 ================================================================================================================
method or function chaining ?
- Function chaining is a pattern in JavaScript where multiple functions are called on the same object consecutively. 
- Using the same object reference, multiple functions can be invoked. 
- It increases the readability of the code and means less redundancy.
var Obj = {
  result: 0,
  addNumber: function(a, b) {
    this.result = a + b;
    return this;
  },

  multiplyNumber: function(a) {
    this.result = this.result * a;
    return this;
  },
 
  divideNumber: function(a) {
    this.result = this.result / a;
    return this;
  }
}

Obj.addNumber(10, 20).multiplyNumber(10).divideNumber(10);
 ================================================================================================================
 Anonymous function or immediately invoked function expresssion (IIFS)
 - A function without a name and invoked immediately is called IIFS
 (function(){}())
 ex: (function(i){
   return i +1
 }(j))
 ================================================================================================================
Prevent Objects From Being Changed in JavaScript ?
const :
const myObject = {
  firstProp: true,
  secondProp: 'Yes'
}
myObject = false            // not allowed (assign)
delete myObject.firstProp   // allowed (delete)
myObject.secondProp = 'No'  // allowed (update)
myObject.thirdProp = 'Yes'  // allowed (add)
------------------------------------------------------------------------------------------------------------------
preventExtensions :
const myObject = {
  firstProp: true,
  secondProp: 'Yes'
}
Object.preventExtensions(myObject);
myObject.isExtensible()     // false
myObject = false            // not allowed (assign)
delete myObject.firstProp   // allowed (delete)
myObject.secondProp = 'No'  // allowed (update)
myObject.thirdProp = 'Yes'  // not allowed (add)
------------------------------------------------------------------------------------------------------------------
seal:
const myObject = {
  firstProp: true,
  secondProp: 'Yes'
}
Object.seal(myObject);
myObject.isSealed()         // true
myObject = false            // not allowed (assign)
delete myObject.firstProp   // not allowed (delete)
myObject.secondProp = 'No'  // allowed (update)
myObject.thirdProp = 'Yes'  // not allowed (add)
------------------------------------------------------------------------------------------------------------------
freeze:
const myObject = {
  firstProp: true,
  secondProp: 'Yes'
}
Object.freeze(myObject);
myObject.isFrozen()         // true
myObject = false            // not allowed (assign)
delete myObject.firstProp   // not allowed (delete)
myObject.secondProp = 'No'  // not allowed (update)
myObject.thirdProp = 'Yes'  // not allowed (add)


